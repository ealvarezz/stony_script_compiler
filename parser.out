Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> root
Rule 1     root -> LBRACE stmt_list RBRACE
Rule 2     stmt -> LBRACE stmt_list RBRACE
Rule 3     stmt_list -> stmt stmt_list
Rule 4     stmt_list -> <empty>
Rule 5     stmt -> PRINT LPAREN expr RPAREN SEMI
Rule 6     stmt -> VARNAME ASSIGN expr SEMI
Rule 7     stmt -> VARNAME ASSIGN VARNAME SEMI
Rule 8     stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
Rule 9     stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI
Rule 10    stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
Rule 11    stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 12    stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 13    stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 14    expr -> VARNAME LBRACKET expr RBRACKET
Rule 15    expr -> expr PLUS expr
Rule 16    expr -> expr MINUS expr
Rule 17    expr -> expr TIMES expr
Rule 18    expr -> expr DIVIDE expr
Rule 19    expr -> expr FLOOR expr
Rule 20    expr -> expr MOD expr
Rule 21    expr -> expr POW expr
Rule 22    expr -> expr AND expr
Rule 23    expr -> expr OR expr
Rule 24    expr -> expr GT expr
Rule 25    expr -> expr GE expr
Rule 26    expr -> expr EQ expr
Rule 27    expr -> expr LT expr
Rule 28    expr -> expr LE expr
Rule 29    expr -> expr NE expr
Rule 30    expr -> LBRACKET items RBRACKET
Rule 31    items -> items COMMA expr
Rule 32    items -> expr
Rule 33    expr -> expr LBRACKET expr RBRACKET
Rule 34    expr -> STRING LBRACKET expr RBRACKET
Rule 35    expr -> LBRACKET RBRACKET
Rule 36    expr -> LPAREN expr RPAREN
Rule 37    expr -> NOT expr
Rule 38    expr -> VARNAME
Rule 39    expr -> STRING
Rule 40    expr -> NUMBER
Rule 41    expr -> BOOL
Rule 42    expr -> expr IN expr

Terminals, with rules where they appear

AND                  : 22
ASSIGN               : 6 7 8 9 10
BOOL                 : 41
COMMA                : 31
DIVIDE               : 18
ELSE                 : 13
EQ                   : 26
FLOOR                : 19
GE                   : 25
GT                   : 24
IF                   : 12 13
IN                   : 42
LBRACE               : 1 2 11 12 13 13
LBRACKET             : 8 9 10 14 30 33 34 35
LE                   : 28
LPAREN               : 5 11 12 13 36
LT                   : 27
MINUS                : 16
MOD                  : 20
NE                   : 29
NOT                  : 37
NUMBER               : 40
OR                   : 23
PLUS                 : 15
POW                  : 21
PRINT                : 5
RBRACE               : 1 2 11 12 13 13
RBRACKET             : 8 9 10 14 30 33 34 35
RPAREN               : 5 11 12 13 36
SEMI                 : 5 6 7 8 9 10
STRING               : 10 34 39
TIMES                : 17
VARNAME              : 6 7 7 8 14 38
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

expr                 : 5 6 8 8 9 9 9 10 10 11 12 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 31 32 33 33 34 36 37 42 42
items                : 30 31
root                 : 0
stmt                 : 3
stmt_list            : 1 2 3 11 12 13 13

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 2

    root                           shift and go to state 1

state 1

    (0) S' -> root .



state 2

    (1) root -> LBRACE . stmt_list RBRACE
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    stmt_list                      shift and go to state 4
    stmt                           shift and go to state 5
    expr                           shift and go to state 8

state 3

    (2) stmt -> LBRACE . stmt_list RBRACE
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    stmt_list                      shift and go to state 17
    stmt                           shift and go to state 5
    expr                           shift and go to state 8

state 4

    (1) root -> LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 18


state 5

    (3) stmt_list -> stmt . stmt_list
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    stmt                           shift and go to state 5
    stmt_list                      shift and go to state 19
    expr                           shift and go to state 8

state 6

    (5) stmt -> PRINT . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 20


state 7

    (36) expr -> LPAREN . expr RPAREN
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 21

state 8

    (9) stmt -> expr . LBRACKET expr RBRACKET ASSIGN expr SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    LBRACKET        shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    IN              shift and go to state 40


state 9

    (6) stmt -> VARNAME . ASSIGN expr SEMI
    (7) stmt -> VARNAME . ASSIGN VARNAME SEMI
    (8) stmt -> VARNAME . LBRACKET expr RBRACKET ASSIGN expr SEMI
    (14) expr -> VARNAME . LBRACKET expr RBRACKET
    (38) expr -> VARNAME .

  ! shift/reduce conflict for LBRACKET resolved as shift
    ASSIGN          shift and go to state 41
    LBRACKET        shift and go to state 42
    PLUS            reduce using rule 38 (expr -> VARNAME .)
    MINUS           reduce using rule 38 (expr -> VARNAME .)
    TIMES           reduce using rule 38 (expr -> VARNAME .)
    DIVIDE          reduce using rule 38 (expr -> VARNAME .)
    FLOOR           reduce using rule 38 (expr -> VARNAME .)
    MOD             reduce using rule 38 (expr -> VARNAME .)
    POW             reduce using rule 38 (expr -> VARNAME .)
    AND             reduce using rule 38 (expr -> VARNAME .)
    OR              reduce using rule 38 (expr -> VARNAME .)
    GT              reduce using rule 38 (expr -> VARNAME .)
    GE              reduce using rule 38 (expr -> VARNAME .)
    EQ              reduce using rule 38 (expr -> VARNAME .)
    LT              reduce using rule 38 (expr -> VARNAME .)
    LE              reduce using rule 38 (expr -> VARNAME .)
    NE              reduce using rule 38 (expr -> VARNAME .)
    IN              reduce using rule 38 (expr -> VARNAME .)

  ! LBRACKET        [ reduce using rule 38 (expr -> VARNAME .) ]


state 10

    (30) expr -> LBRACKET . items RBRACKET
    (35) expr -> LBRACKET . RBRACKET
    (31) items -> . items COMMA expr
    (32) items -> . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACKET        shift and go to state 44
    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    items                          shift and go to state 43
    expr                           shift and go to state 45

state 11

    (10) stmt -> STRING . LBRACKET expr RBRACKET ASSIGN expr SEMI
    (34) expr -> STRING . LBRACKET expr RBRACKET
    (39) expr -> STRING .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 46
    PLUS            reduce using rule 39 (expr -> STRING .)
    MINUS           reduce using rule 39 (expr -> STRING .)
    TIMES           reduce using rule 39 (expr -> STRING .)
    DIVIDE          reduce using rule 39 (expr -> STRING .)
    FLOOR           reduce using rule 39 (expr -> STRING .)
    MOD             reduce using rule 39 (expr -> STRING .)
    POW             reduce using rule 39 (expr -> STRING .)
    AND             reduce using rule 39 (expr -> STRING .)
    OR              reduce using rule 39 (expr -> STRING .)
    GT              reduce using rule 39 (expr -> STRING .)
    GE              reduce using rule 39 (expr -> STRING .)
    EQ              reduce using rule 39 (expr -> STRING .)
    LT              reduce using rule 39 (expr -> STRING .)
    LE              reduce using rule 39 (expr -> STRING .)
    NE              reduce using rule 39 (expr -> STRING .)
    IN              reduce using rule 39 (expr -> STRING .)

  ! LBRACKET        [ reduce using rule 39 (expr -> STRING .) ]


state 12

    (11) stmt -> WHILE . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 47


state 13

    (12) stmt -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 48


state 14

    (37) expr -> NOT . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 49

state 15

    (40) expr -> NUMBER .

    LBRACKET        reduce using rule 40 (expr -> NUMBER .)
    PLUS            reduce using rule 40 (expr -> NUMBER .)
    MINUS           reduce using rule 40 (expr -> NUMBER .)
    TIMES           reduce using rule 40 (expr -> NUMBER .)
    DIVIDE          reduce using rule 40 (expr -> NUMBER .)
    FLOOR           reduce using rule 40 (expr -> NUMBER .)
    MOD             reduce using rule 40 (expr -> NUMBER .)
    POW             reduce using rule 40 (expr -> NUMBER .)
    AND             reduce using rule 40 (expr -> NUMBER .)
    OR              reduce using rule 40 (expr -> NUMBER .)
    GT              reduce using rule 40 (expr -> NUMBER .)
    GE              reduce using rule 40 (expr -> NUMBER .)
    EQ              reduce using rule 40 (expr -> NUMBER .)
    LT              reduce using rule 40 (expr -> NUMBER .)
    LE              reduce using rule 40 (expr -> NUMBER .)
    NE              reduce using rule 40 (expr -> NUMBER .)
    IN              reduce using rule 40 (expr -> NUMBER .)
    RPAREN          reduce using rule 40 (expr -> NUMBER .)
    RBRACKET        reduce using rule 40 (expr -> NUMBER .)
    COMMA           reduce using rule 40 (expr -> NUMBER .)
    SEMI            reduce using rule 40 (expr -> NUMBER .)


state 16

    (41) expr -> BOOL .

    LBRACKET        reduce using rule 41 (expr -> BOOL .)
    PLUS            reduce using rule 41 (expr -> BOOL .)
    MINUS           reduce using rule 41 (expr -> BOOL .)
    TIMES           reduce using rule 41 (expr -> BOOL .)
    DIVIDE          reduce using rule 41 (expr -> BOOL .)
    FLOOR           reduce using rule 41 (expr -> BOOL .)
    MOD             reduce using rule 41 (expr -> BOOL .)
    POW             reduce using rule 41 (expr -> BOOL .)
    AND             reduce using rule 41 (expr -> BOOL .)
    OR              reduce using rule 41 (expr -> BOOL .)
    GT              reduce using rule 41 (expr -> BOOL .)
    GE              reduce using rule 41 (expr -> BOOL .)
    EQ              reduce using rule 41 (expr -> BOOL .)
    LT              reduce using rule 41 (expr -> BOOL .)
    LE              reduce using rule 41 (expr -> BOOL .)
    NE              reduce using rule 41 (expr -> BOOL .)
    IN              reduce using rule 41 (expr -> BOOL .)
    RPAREN          reduce using rule 41 (expr -> BOOL .)
    RBRACKET        reduce using rule 41 (expr -> BOOL .)
    COMMA           reduce using rule 41 (expr -> BOOL .)
    SEMI            reduce using rule 41 (expr -> BOOL .)


state 17

    (2) stmt -> LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 50


state 18

    (1) root -> LBRACE stmt_list RBRACE .

    $end            reduce using rule 1 (root -> LBRACE stmt_list RBRACE .)


state 19

    (3) stmt_list -> stmt stmt_list .

    RBRACE          reduce using rule 3 (stmt_list -> stmt stmt_list .)


state 20

    (5) stmt -> PRINT LPAREN . expr RPAREN SEMI
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 51

state 21

    (36) expr -> LPAREN expr . RPAREN
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 22

    (14) expr -> VARNAME . LBRACKET expr RBRACKET
    (38) expr -> VARNAME .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 54
    RPAREN          reduce using rule 38 (expr -> VARNAME .)
    PLUS            reduce using rule 38 (expr -> VARNAME .)
    MINUS           reduce using rule 38 (expr -> VARNAME .)
    TIMES           reduce using rule 38 (expr -> VARNAME .)
    DIVIDE          reduce using rule 38 (expr -> VARNAME .)
    FLOOR           reduce using rule 38 (expr -> VARNAME .)
    MOD             reduce using rule 38 (expr -> VARNAME .)
    POW             reduce using rule 38 (expr -> VARNAME .)
    AND             reduce using rule 38 (expr -> VARNAME .)
    OR              reduce using rule 38 (expr -> VARNAME .)
    GT              reduce using rule 38 (expr -> VARNAME .)
    GE              reduce using rule 38 (expr -> VARNAME .)
    EQ              reduce using rule 38 (expr -> VARNAME .)
    LT              reduce using rule 38 (expr -> VARNAME .)
    LE              reduce using rule 38 (expr -> VARNAME .)
    NE              reduce using rule 38 (expr -> VARNAME .)
    IN              reduce using rule 38 (expr -> VARNAME .)
    RBRACKET        reduce using rule 38 (expr -> VARNAME .)
    COMMA           reduce using rule 38 (expr -> VARNAME .)
    SEMI            reduce using rule 38 (expr -> VARNAME .)

  ! LBRACKET        [ reduce using rule 38 (expr -> VARNAME .) ]


state 23

    (34) expr -> STRING . LBRACKET expr RBRACKET
    (39) expr -> STRING .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 55
    RPAREN          reduce using rule 39 (expr -> STRING .)
    PLUS            reduce using rule 39 (expr -> STRING .)
    MINUS           reduce using rule 39 (expr -> STRING .)
    TIMES           reduce using rule 39 (expr -> STRING .)
    DIVIDE          reduce using rule 39 (expr -> STRING .)
    FLOOR           reduce using rule 39 (expr -> STRING .)
    MOD             reduce using rule 39 (expr -> STRING .)
    POW             reduce using rule 39 (expr -> STRING .)
    AND             reduce using rule 39 (expr -> STRING .)
    OR              reduce using rule 39 (expr -> STRING .)
    GT              reduce using rule 39 (expr -> STRING .)
    GE              reduce using rule 39 (expr -> STRING .)
    EQ              reduce using rule 39 (expr -> STRING .)
    LT              reduce using rule 39 (expr -> STRING .)
    LE              reduce using rule 39 (expr -> STRING .)
    NE              reduce using rule 39 (expr -> STRING .)
    IN              reduce using rule 39 (expr -> STRING .)
    RBRACKET        reduce using rule 39 (expr -> STRING .)
    COMMA           reduce using rule 39 (expr -> STRING .)
    SEMI            reduce using rule 39 (expr -> STRING .)

  ! LBRACKET        [ reduce using rule 39 (expr -> STRING .) ]


state 24

    (9) stmt -> expr LBRACKET . expr RBRACKET ASSIGN expr SEMI
    (33) expr -> expr LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 56

state 25

    (15) expr -> expr PLUS . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 57

state 26

    (16) expr -> expr MINUS . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 58

state 27

    (17) expr -> expr TIMES . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 59

state 28

    (18) expr -> expr DIVIDE . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 60

state 29

    (19) expr -> expr FLOOR . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 61

state 30

    (20) expr -> expr MOD . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 62

state 31

    (21) expr -> expr POW . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 63

state 32

    (22) expr -> expr AND . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 64

state 33

    (23) expr -> expr OR . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 65

state 34

    (24) expr -> expr GT . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 66

state 35

    (25) expr -> expr GE . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 67

state 36

    (26) expr -> expr EQ . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 68

state 37

    (27) expr -> expr LT . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 69

state 38

    (28) expr -> expr LE . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 70

state 39

    (29) expr -> expr NE . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 71

state 40

    (42) expr -> expr IN . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 72

state 41

    (6) stmt -> VARNAME ASSIGN . expr SEMI
    (7) stmt -> VARNAME ASSIGN . VARNAME SEMI
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 73
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 74

state 42

    (8) stmt -> VARNAME LBRACKET . expr RBRACKET ASSIGN expr SEMI
    (14) expr -> VARNAME LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 75

state 43

    (30) expr -> LBRACKET items . RBRACKET
    (31) items -> items . COMMA expr

    RBRACKET        shift and go to state 76
    COMMA           shift and go to state 77


state 44

    (35) expr -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    FLOOR           reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    MOD             reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    POW             reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    AND             reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    OR              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    GT              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    GE              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    EQ              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    LT              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    LE              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    NE              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    IN              reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 35 (expr -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 35 (expr -> LBRACKET RBRACKET .)


state 45

    (32) items -> expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        reduce using rule 32 (items -> expr .)
    COMMA           reduce using rule 32 (items -> expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 46

    (10) stmt -> STRING LBRACKET . expr RBRACKET ASSIGN expr SEMI
    (34) expr -> STRING LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 78

state 47

    (11) stmt -> WHILE LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 79

state 48

    (12) stmt -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 80

state 49

    (37) expr -> NOT expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 37 (expr -> NOT expr .)
    OR              reduce using rule 37 (expr -> NOT expr .)
    RPAREN          reduce using rule 37 (expr -> NOT expr .)
    RBRACKET        reduce using rule 37 (expr -> NOT expr .)
    COMMA           reduce using rule 37 (expr -> NOT expr .)
    SEMI            reduce using rule 37 (expr -> NOT expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 37 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 37 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> NOT expr .) ]
  ! FLOOR           [ reduce using rule 37 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> NOT expr .) ]
  ! POW             [ reduce using rule 37 (expr -> NOT expr .) ]
  ! GT              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! GE              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! LT              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! LE              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! NE              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! IN              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]


state 50

    (2) stmt -> LBRACE stmt_list RBRACE .

    LBRACE          reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    VARNAME         reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    IF              reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 2 (stmt -> LBRACE stmt_list RBRACE .)


state 51

    (5) stmt -> PRINT LPAREN expr . RPAREN SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RPAREN          shift and go to state 81
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 52

    (36) expr -> LPAREN expr RPAREN .

    LBRACKET        reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    FLOOR           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 36 (expr -> LPAREN expr RPAREN .)


state 53

    (33) expr -> expr LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 82

state 54

    (14) expr -> VARNAME LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 83

state 55

    (34) expr -> STRING LBRACKET . expr RBRACKET
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 84

state 56

    (9) stmt -> expr LBRACKET expr . RBRACKET ASSIGN expr SEMI
    (33) expr -> expr LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 85
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 57

    (15) expr -> expr PLUS expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 15 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 15 (expr -> expr PLUS expr .)
    AND             reduce using rule 15 (expr -> expr PLUS expr .)
    OR              reduce using rule 15 (expr -> expr PLUS expr .)
    GT              reduce using rule 15 (expr -> expr PLUS expr .)
    GE              reduce using rule 15 (expr -> expr PLUS expr .)
    EQ              reduce using rule 15 (expr -> expr PLUS expr .)
    LT              reduce using rule 15 (expr -> expr PLUS expr .)
    LE              reduce using rule 15 (expr -> expr PLUS expr .)
    NE              reduce using rule 15 (expr -> expr PLUS expr .)
    IN              reduce using rule 15 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 15 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 15 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 15 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 15 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! FLOOR           [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 15 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 58

    (16) expr -> expr MINUS expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 16 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 16 (expr -> expr MINUS expr .)
    AND             reduce using rule 16 (expr -> expr MINUS expr .)
    OR              reduce using rule 16 (expr -> expr MINUS expr .)
    GT              reduce using rule 16 (expr -> expr MINUS expr .)
    GE              reduce using rule 16 (expr -> expr MINUS expr .)
    EQ              reduce using rule 16 (expr -> expr MINUS expr .)
    LT              reduce using rule 16 (expr -> expr MINUS expr .)
    LE              reduce using rule 16 (expr -> expr MINUS expr .)
    NE              reduce using rule 16 (expr -> expr MINUS expr .)
    IN              reduce using rule 16 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 16 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 16 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 16 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 16 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! FLOOR           [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 16 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 59

    (17) expr -> expr TIMES expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 17 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 17 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 17 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 17 (expr -> expr TIMES expr .)
    FLOOR           reduce using rule 17 (expr -> expr TIMES expr .)
    MOD             reduce using rule 17 (expr -> expr TIMES expr .)
    AND             reduce using rule 17 (expr -> expr TIMES expr .)
    OR              reduce using rule 17 (expr -> expr TIMES expr .)
    GT              reduce using rule 17 (expr -> expr TIMES expr .)
    GE              reduce using rule 17 (expr -> expr TIMES expr .)
    EQ              reduce using rule 17 (expr -> expr TIMES expr .)
    LT              reduce using rule 17 (expr -> expr TIMES expr .)
    LE              reduce using rule 17 (expr -> expr TIMES expr .)
    NE              reduce using rule 17 (expr -> expr TIMES expr .)
    IN              reduce using rule 17 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 17 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 17 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 17 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 17 (expr -> expr TIMES expr .)
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 17 (expr -> expr TIMES expr .) ]
  ! POW             [ reduce using rule 17 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! FLOOR           [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 60

    (18) expr -> expr DIVIDE expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 18 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 18 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 18 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 18 (expr -> expr DIVIDE expr .)
    FLOOR           reduce using rule 18 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 18 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 18 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 18 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 18 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 18 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 18 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 18 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 18 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 18 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 18 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 18 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 18 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 18 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 18 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! POW             [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! FLOOR           [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 61

    (19) expr -> expr FLOOR expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 19 (expr -> expr FLOOR expr .)
    MINUS           reduce using rule 19 (expr -> expr FLOOR expr .)
    FLOOR           reduce using rule 19 (expr -> expr FLOOR expr .)
    AND             reduce using rule 19 (expr -> expr FLOOR expr .)
    OR              reduce using rule 19 (expr -> expr FLOOR expr .)
    GT              reduce using rule 19 (expr -> expr FLOOR expr .)
    GE              reduce using rule 19 (expr -> expr FLOOR expr .)
    EQ              reduce using rule 19 (expr -> expr FLOOR expr .)
    LT              reduce using rule 19 (expr -> expr FLOOR expr .)
    LE              reduce using rule 19 (expr -> expr FLOOR expr .)
    NE              reduce using rule 19 (expr -> expr FLOOR expr .)
    IN              reduce using rule 19 (expr -> expr FLOOR expr .)
    RPAREN          reduce using rule 19 (expr -> expr FLOOR expr .)
    RBRACKET        reduce using rule 19 (expr -> expr FLOOR expr .)
    COMMA           reduce using rule 19 (expr -> expr FLOOR expr .)
    SEMI            reduce using rule 19 (expr -> expr FLOOR expr .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 19 (expr -> expr FLOOR expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr FLOOR expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr FLOOR expr .) ]
  ! MOD             [ reduce using rule 19 (expr -> expr FLOOR expr .) ]
  ! POW             [ reduce using rule 19 (expr -> expr FLOOR expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! FLOOR           [ shift and go to state 29 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 62

    (20) expr -> expr MOD expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 20 (expr -> expr MOD expr .)
    MINUS           reduce using rule 20 (expr -> expr MOD expr .)
    FLOOR           reduce using rule 20 (expr -> expr MOD expr .)
    MOD             reduce using rule 20 (expr -> expr MOD expr .)
    AND             reduce using rule 20 (expr -> expr MOD expr .)
    OR              reduce using rule 20 (expr -> expr MOD expr .)
    GT              reduce using rule 20 (expr -> expr MOD expr .)
    GE              reduce using rule 20 (expr -> expr MOD expr .)
    EQ              reduce using rule 20 (expr -> expr MOD expr .)
    LT              reduce using rule 20 (expr -> expr MOD expr .)
    LE              reduce using rule 20 (expr -> expr MOD expr .)
    NE              reduce using rule 20 (expr -> expr MOD expr .)
    IN              reduce using rule 20 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 20 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 20 (expr -> expr MOD expr .)
    COMMA           reduce using rule 20 (expr -> expr MOD expr .)
    SEMI            reduce using rule 20 (expr -> expr MOD expr .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! POW             [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! FLOOR           [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 63

    (21) expr -> expr POW expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    PLUS            reduce using rule 21 (expr -> expr POW expr .)
    MINUS           reduce using rule 21 (expr -> expr POW expr .)
    TIMES           reduce using rule 21 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 21 (expr -> expr POW expr .)
    FLOOR           reduce using rule 21 (expr -> expr POW expr .)
    MOD             reduce using rule 21 (expr -> expr POW expr .)
    AND             reduce using rule 21 (expr -> expr POW expr .)
    OR              reduce using rule 21 (expr -> expr POW expr .)
    GT              reduce using rule 21 (expr -> expr POW expr .)
    GE              reduce using rule 21 (expr -> expr POW expr .)
    EQ              reduce using rule 21 (expr -> expr POW expr .)
    LT              reduce using rule 21 (expr -> expr POW expr .)
    LE              reduce using rule 21 (expr -> expr POW expr .)
    NE              reduce using rule 21 (expr -> expr POW expr .)
    IN              reduce using rule 21 (expr -> expr POW expr .)
    RPAREN          reduce using rule 21 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 21 (expr -> expr POW expr .)
    COMMA           reduce using rule 21 (expr -> expr POW expr .)
    SEMI            reduce using rule 21 (expr -> expr POW expr .)
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 21 (expr -> expr POW expr .) ]
  ! POW             [ reduce using rule 21 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! FLOOR           [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 64

    (22) expr -> expr AND expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 22 (expr -> expr AND expr .)
    OR              reduce using rule 22 (expr -> expr AND expr .)
    RPAREN          reduce using rule 22 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 22 (expr -> expr AND expr .)
    COMMA           reduce using rule 22 (expr -> expr AND expr .)
    SEMI            reduce using rule 22 (expr -> expr AND expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! FLOOR           [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! POW             [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! IN              [ reduce using rule 22 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]


state 65

    (23) expr -> expr OR expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    OR              reduce using rule 23 (expr -> expr OR expr .)
    RPAREN          reduce using rule 23 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 23 (expr -> expr OR expr .)
    COMMA           reduce using rule 23 (expr -> expr OR expr .)
    SEMI            reduce using rule 23 (expr -> expr OR expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! FLOOR           [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! POW             [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! IN              [ reduce using rule 23 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 33 ]


state 66

    (24) expr -> expr GT expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 24 (expr -> expr GT expr .)
    OR              reduce using rule 24 (expr -> expr GT expr .)
    GT              reduce using rule 24 (expr -> expr GT expr .)
    GE              reduce using rule 24 (expr -> expr GT expr .)
    EQ              reduce using rule 24 (expr -> expr GT expr .)
    LT              reduce using rule 24 (expr -> expr GT expr .)
    LE              reduce using rule 24 (expr -> expr GT expr .)
    NE              reduce using rule 24 (expr -> expr GT expr .)
    RPAREN          reduce using rule 24 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 24 (expr -> expr GT expr .)
    COMMA           reduce using rule 24 (expr -> expr GT expr .)
    SEMI            reduce using rule 24 (expr -> expr GT expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! FLOOR           [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! IN              [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 67

    (25) expr -> expr GE expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 25 (expr -> expr GE expr .)
    OR              reduce using rule 25 (expr -> expr GE expr .)
    GT              reduce using rule 25 (expr -> expr GE expr .)
    GE              reduce using rule 25 (expr -> expr GE expr .)
    EQ              reduce using rule 25 (expr -> expr GE expr .)
    LT              reduce using rule 25 (expr -> expr GE expr .)
    LE              reduce using rule 25 (expr -> expr GE expr .)
    NE              reduce using rule 25 (expr -> expr GE expr .)
    RPAREN          reduce using rule 25 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 25 (expr -> expr GE expr .)
    COMMA           reduce using rule 25 (expr -> expr GE expr .)
    SEMI            reduce using rule 25 (expr -> expr GE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! FLOOR           [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! IN              [ reduce using rule 25 (expr -> expr GE expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 68

    (26) expr -> expr EQ expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 26 (expr -> expr EQ expr .)
    OR              reduce using rule 26 (expr -> expr EQ expr .)
    GT              reduce using rule 26 (expr -> expr EQ expr .)
    GE              reduce using rule 26 (expr -> expr EQ expr .)
    EQ              reduce using rule 26 (expr -> expr EQ expr .)
    LT              reduce using rule 26 (expr -> expr EQ expr .)
    LE              reduce using rule 26 (expr -> expr EQ expr .)
    NE              reduce using rule 26 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 26 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 26 (expr -> expr EQ expr .)
    COMMA           reduce using rule 26 (expr -> expr EQ expr .)
    SEMI            reduce using rule 26 (expr -> expr EQ expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! FLOOR           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! IN              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 69

    (27) expr -> expr LT expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 27 (expr -> expr LT expr .)
    OR              reduce using rule 27 (expr -> expr LT expr .)
    GT              reduce using rule 27 (expr -> expr LT expr .)
    GE              reduce using rule 27 (expr -> expr LT expr .)
    EQ              reduce using rule 27 (expr -> expr LT expr .)
    LT              reduce using rule 27 (expr -> expr LT expr .)
    LE              reduce using rule 27 (expr -> expr LT expr .)
    NE              reduce using rule 27 (expr -> expr LT expr .)
    RPAREN          reduce using rule 27 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 27 (expr -> expr LT expr .)
    COMMA           reduce using rule 27 (expr -> expr LT expr .)
    SEMI            reduce using rule 27 (expr -> expr LT expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! FLOOR           [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! IN              [ reduce using rule 27 (expr -> expr LT expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 70

    (28) expr -> expr LE expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 28 (expr -> expr LE expr .)
    OR              reduce using rule 28 (expr -> expr LE expr .)
    GT              reduce using rule 28 (expr -> expr LE expr .)
    GE              reduce using rule 28 (expr -> expr LE expr .)
    EQ              reduce using rule 28 (expr -> expr LE expr .)
    LT              reduce using rule 28 (expr -> expr LE expr .)
    LE              reduce using rule 28 (expr -> expr LE expr .)
    NE              reduce using rule 28 (expr -> expr LE expr .)
    RPAREN          reduce using rule 28 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 28 (expr -> expr LE expr .)
    COMMA           reduce using rule 28 (expr -> expr LE expr .)
    SEMI            reduce using rule 28 (expr -> expr LE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! FLOOR           [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! IN              [ reduce using rule 28 (expr -> expr LE expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 71

    (29) expr -> expr NE expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 29 (expr -> expr NE expr .)
    OR              reduce using rule 29 (expr -> expr NE expr .)
    GT              reduce using rule 29 (expr -> expr NE expr .)
    GE              reduce using rule 29 (expr -> expr NE expr .)
    EQ              reduce using rule 29 (expr -> expr NE expr .)
    LT              reduce using rule 29 (expr -> expr NE expr .)
    LE              reduce using rule 29 (expr -> expr NE expr .)
    NE              reduce using rule 29 (expr -> expr NE expr .)
    RPAREN          reduce using rule 29 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 29 (expr -> expr NE expr .)
    COMMA           reduce using rule 29 (expr -> expr NE expr .)
    SEMI            reduce using rule 29 (expr -> expr NE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40

  ! LBRACKET        [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! FLOOR           [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! IN              [ reduce using rule 29 (expr -> expr NE expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]


state 72

    (42) expr -> expr IN expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    AND             reduce using rule 42 (expr -> expr IN expr .)
    OR              reduce using rule 42 (expr -> expr IN expr .)
    GT              reduce using rule 42 (expr -> expr IN expr .)
    GE              reduce using rule 42 (expr -> expr IN expr .)
    EQ              reduce using rule 42 (expr -> expr IN expr .)
    LT              reduce using rule 42 (expr -> expr IN expr .)
    LE              reduce using rule 42 (expr -> expr IN expr .)
    NE              reduce using rule 42 (expr -> expr IN expr .)
    IN              reduce using rule 42 (expr -> expr IN expr .)
    RPAREN          reduce using rule 42 (expr -> expr IN expr .)
    RBRACKET        reduce using rule 42 (expr -> expr IN expr .)
    COMMA           reduce using rule 42 (expr -> expr IN expr .)
    SEMI            reduce using rule 42 (expr -> expr IN expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    LBRACKET        shift and go to state 53

  ! LBRACKET        [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! FLOOR           [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! POW             [ reduce using rule 42 (expr -> expr IN expr .) ]
  ! AND             [ shift and go to state 32 ]
  ! OR              [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! EQ              [ shift and go to state 36 ]
  ! LT              [ shift and go to state 37 ]
  ! LE              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! IN              [ shift and go to state 40 ]


state 73

    (7) stmt -> VARNAME ASSIGN VARNAME . SEMI
    (14) expr -> VARNAME . LBRACKET expr RBRACKET
    (38) expr -> VARNAME .

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    SEMI            shift and go to state 86
    LBRACKET        shift and go to state 54
    PLUS            reduce using rule 38 (expr -> VARNAME .)
    MINUS           reduce using rule 38 (expr -> VARNAME .)
    TIMES           reduce using rule 38 (expr -> VARNAME .)
    DIVIDE          reduce using rule 38 (expr -> VARNAME .)
    FLOOR           reduce using rule 38 (expr -> VARNAME .)
    MOD             reduce using rule 38 (expr -> VARNAME .)
    POW             reduce using rule 38 (expr -> VARNAME .)
    AND             reduce using rule 38 (expr -> VARNAME .)
    OR              reduce using rule 38 (expr -> VARNAME .)
    GT              reduce using rule 38 (expr -> VARNAME .)
    GE              reduce using rule 38 (expr -> VARNAME .)
    EQ              reduce using rule 38 (expr -> VARNAME .)
    LT              reduce using rule 38 (expr -> VARNAME .)
    LE              reduce using rule 38 (expr -> VARNAME .)
    NE              reduce using rule 38 (expr -> VARNAME .)
    IN              reduce using rule 38 (expr -> VARNAME .)

  ! SEMI            [ reduce using rule 38 (expr -> VARNAME .) ]
  ! LBRACKET        [ reduce using rule 38 (expr -> VARNAME .) ]


state 74

    (6) stmt -> VARNAME ASSIGN expr . SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    SEMI            shift and go to state 87
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 75

    (8) stmt -> VARNAME LBRACKET expr . RBRACKET ASSIGN expr SEMI
    (14) expr -> VARNAME LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 88
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 76

    (30) expr -> LBRACKET items RBRACKET .

    LBRACKET        reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    PLUS            reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    MINUS           reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    TIMES           reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    DIVIDE          reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    FLOOR           reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    MOD             reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    POW             reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    AND             reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    OR              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    GT              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    GE              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    EQ              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    LT              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    LE              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    NE              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    IN              reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    RPAREN          reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    RBRACKET        reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    COMMA           reduce using rule 30 (expr -> LBRACKET items RBRACKET .)
    SEMI            reduce using rule 30 (expr -> LBRACKET items RBRACKET .)


state 77

    (31) items -> items COMMA . expr
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 89

state 78

    (10) stmt -> STRING LBRACKET expr . RBRACKET ASSIGN expr SEMI
    (34) expr -> STRING LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 90
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 79

    (11) stmt -> WHILE LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 80

    (12) stmt -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 81

    (5) stmt -> PRINT LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 93


state 82

    (33) expr -> expr LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 94
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 83

    (14) expr -> VARNAME LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 95
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 84

    (34) expr -> STRING LBRACKET expr . RBRACKET
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        shift and go to state 96
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 85

    (9) stmt -> expr LBRACKET expr RBRACKET . ASSIGN expr SEMI
    (33) expr -> expr LBRACKET expr RBRACKET .

    ASSIGN          shift and go to state 97
    LBRACKET        reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    POW             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    EQ              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    IN              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)


state 86

    (7) stmt -> VARNAME ASSIGN VARNAME SEMI .

    LBRACE          reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    PRINT           reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    VARNAME         reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    STRING          reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    WHILE           reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    IF              reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    LBRACKET        reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    LPAREN          reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    NOT             reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    NUMBER          reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    BOOL            reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)
    RBRACE          reduce using rule 7 (stmt -> VARNAME ASSIGN VARNAME SEMI .)


state 87

    (6) stmt -> VARNAME ASSIGN expr SEMI .

    LBRACE          reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    PRINT           reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    VARNAME         reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    STRING          reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    WHILE           reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    IF              reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    LBRACKET        reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    LPAREN          reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    NOT             reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    NUMBER          reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    BOOL            reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)
    RBRACE          reduce using rule 6 (stmt -> VARNAME ASSIGN expr SEMI .)


state 88

    (8) stmt -> VARNAME LBRACKET expr RBRACKET . ASSIGN expr SEMI
    (14) expr -> VARNAME LBRACKET expr RBRACKET .

    ASSIGN          shift and go to state 98
    LBRACKET        reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    MOD             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    POW             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    AND             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    OR              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    GT              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    GE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    EQ              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    LT              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    LE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    NE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    IN              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)


state 89

    (31) items -> items COMMA expr .
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    RBRACKET        reduce using rule 31 (items -> items COMMA expr .)
    COMMA           reduce using rule 31 (items -> items COMMA expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 90

    (10) stmt -> STRING LBRACKET expr RBRACKET . ASSIGN expr SEMI
    (34) expr -> STRING LBRACKET expr RBRACKET .

    ASSIGN          shift and go to state 99
    LBRACKET        reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    MOD             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    POW             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    AND             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    OR              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    GT              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    GE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    EQ              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    LT              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    LE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    NE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    IN              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)


state 91

    (11) stmt -> WHILE LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 100


state 92

    (12) stmt -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE
    (13) stmt -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 101


state 93

    (5) stmt -> PRINT LPAREN expr RPAREN SEMI .

    LBRACE          reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    VARNAME         reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    STRING          reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    LBRACKET        reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    NOT             reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    NUMBER          reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    BOOL            reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 5 (stmt -> PRINT LPAREN expr RPAREN SEMI .)


state 94

    (33) expr -> expr LBRACKET expr RBRACKET .

    RPAREN          reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    POW             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    EQ              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    IN              reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 33 (expr -> expr LBRACKET expr RBRACKET .)


state 95

    (14) expr -> VARNAME LBRACKET expr RBRACKET .

    RPAREN          reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    MOD             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    POW             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    AND             reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    OR              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    GT              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    GE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    EQ              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    LT              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    LE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    NE              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    IN              reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 14 (expr -> VARNAME LBRACKET expr RBRACKET .)


state 96

    (34) expr -> STRING LBRACKET expr RBRACKET .

    RPAREN          reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    MOD             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    POW             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    AND             reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    OR              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    GT              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    GE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    EQ              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    LT              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    LE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    NE              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    IN              reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 34 (expr -> STRING LBRACKET expr RBRACKET .)


state 97

    (9) stmt -> expr LBRACKET expr RBRACKET ASSIGN . expr SEMI
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 102

state 98

    (8) stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN . expr SEMI
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 103

state 99

    (10) stmt -> STRING LBRACKET expr RBRACKET ASSIGN . expr SEMI
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    VARNAME         shift and go to state 22
    LBRACKET        shift and go to state 10
    STRING          shift and go to state 23
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 104

state 100

    (11) stmt -> WHILE LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 8
    stmt_list                      shift and go to state 105
    stmt                           shift and go to state 5

state 101

    (12) stmt -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (13) stmt -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 8
    stmt_list                      shift and go to state 106
    stmt                           shift and go to state 5

state 102

    (9) stmt -> expr LBRACKET expr RBRACKET ASSIGN expr . SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    SEMI            shift and go to state 107
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 103

    (8) stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr . SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    SEMI            shift and go to state 108
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 104

    (10) stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr . SEMI
    (15) expr -> expr . PLUS expr
    (16) expr -> expr . MINUS expr
    (17) expr -> expr . TIMES expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . FLOOR expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . OR expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . GE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . LT expr
    (28) expr -> expr . LE expr
    (29) expr -> expr . NE expr
    (33) expr -> expr . LBRACKET expr RBRACKET
    (42) expr -> expr . IN expr

    SEMI            shift and go to state 109
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 28
    FLOOR           shift and go to state 29
    MOD             shift and go to state 30
    POW             shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQ              shift and go to state 36
    LT              shift and go to state 37
    LE              shift and go to state 38
    NE              shift and go to state 39
    LBRACKET        shift and go to state 53
    IN              shift and go to state 40


state 105

    (11) stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 110


state 106

    (12) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE

    RBRACE          shift and go to state 111


state 107

    (9) stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .

    LBRACE          reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    PRINT           reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    VARNAME         reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    STRING          reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    WHILE           reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    IF              reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LBRACKET        reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LPAREN          reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NOT             reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NUMBER          reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    BOOL            reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    RBRACE          reduce using rule 9 (stmt -> expr LBRACKET expr RBRACKET ASSIGN expr SEMI .)


state 108

    (8) stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .

    LBRACE          reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    PRINT           reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    VARNAME         reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    STRING          reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    WHILE           reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    IF              reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LBRACKET        reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LPAREN          reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NOT             reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NUMBER          reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    BOOL            reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    RBRACE          reduce using rule 8 (stmt -> VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI .)


state 109

    (10) stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .

    LBRACE          reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    PRINT           reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    VARNAME         reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    STRING          reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    WHILE           reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    IF              reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LBRACKET        reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    LPAREN          reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NOT             reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    NUMBER          reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    BOOL            reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)
    RBRACE          reduce using rule 10 (stmt -> STRING LBRACKET expr RBRACKET ASSIGN expr SEMI .)


state 110

    (11) stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    LBRACE          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    VARNAME         reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 111

    (12) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .
    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    LBRACE          reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    VARNAME         reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 12 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 112


state 112

    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 113


state 113

    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (3) stmt_list -> . stmt stmt_list
    (4) stmt_list -> .
    (2) stmt -> . LBRACE stmt_list RBRACE
    (5) stmt -> . PRINT LPAREN expr RPAREN SEMI
    (6) stmt -> . VARNAME ASSIGN expr SEMI
    (7) stmt -> . VARNAME ASSIGN VARNAME SEMI
    (8) stmt -> . VARNAME LBRACKET expr RBRACKET ASSIGN expr SEMI
    (9) stmt -> . expr LBRACKET expr RBRACKET ASSIGN expr SEMI
    (10) stmt -> . STRING LBRACKET expr RBRACKET ASSIGN expr SEMI
    (11) stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (12) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (13) stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (14) expr -> . VARNAME LBRACKET expr RBRACKET
    (15) expr -> . expr PLUS expr
    (16) expr -> . expr MINUS expr
    (17) expr -> . expr TIMES expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr FLOOR expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr OR expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr GE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr LT expr
    (28) expr -> . expr LE expr
    (29) expr -> . expr NE expr
    (30) expr -> . LBRACKET items RBRACKET
    (33) expr -> . expr LBRACKET expr RBRACKET
    (34) expr -> . STRING LBRACKET expr RBRACKET
    (35) expr -> . LBRACKET RBRACKET
    (36) expr -> . LPAREN expr RPAREN
    (37) expr -> . NOT expr
    (38) expr -> . VARNAME
    (39) expr -> . STRING
    (40) expr -> . NUMBER
    (41) expr -> . BOOL
    (42) expr -> . expr IN expr

    RBRACE          reduce using rule 4 (stmt_list -> .)
    LBRACE          shift and go to state 3
    PRINT           shift and go to state 6
    VARNAME         shift and go to state 9
    STRING          shift and go to state 11
    WHILE           shift and go to state 12
    IF              shift and go to state 13
    LBRACKET        shift and go to state 10
    LPAREN          shift and go to state 7
    NOT             shift and go to state 14
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 16

    expr                           shift and go to state 8
    stmt_list                      shift and go to state 114
    stmt                           shift and go to state 5

state 114

    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 115


state 115

    (13) stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    LBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    VARNAME         reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 9 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 23 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 73 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 73 resolved as shift
