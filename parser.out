Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> root
Rule 1     root -> expr
Rule 2     expr -> expr PLUS expr
Rule 3     expr -> expr MINUS expr
Rule 4     expr -> expr TIMES expr
Rule 5     expr -> expr DIVIDE expr
Rule 6     expr -> expr FLOOR expr
Rule 7     expr -> expr MOD expr
Rule 8     expr -> expr POW expr
Rule 9     expr -> expr AND expr
Rule 10    expr -> expr OR expr
Rule 11    expr -> expr GT expr
Rule 12    expr -> expr GE expr
Rule 13    expr -> expr EQ expr
Rule 14    expr -> expr LT expr
Rule 15    expr -> expr LE expr
Rule 16    expr -> expr NE expr
Rule 17    expr -> LBRACKET items RBRACKET
Rule 18    items -> items COMMA expr
Rule 19    items -> expr
Rule 20    expr -> expr LBRACKET expr RBRACKET
Rule 21    expr -> STRING LBRACKET expr RBRACKET
Rule 22    expr -> LBRACKET RBRACKET
Rule 23    expr -> LPAREN expr RPAREN
Rule 24    expr -> NOT expr
Rule 25    expr -> STRING
Rule 26    expr -> NUMBER
Rule 27    expr -> BOOL
Rule 28    expr -> expr IN expr

Terminals, with rules where they appear

AND                  : 9
BOOL                 : 27
COMMA                : 18
DIVIDE               : 5
EQ                   : 13
FLOOR                : 6
GE                   : 12
GT                   : 11
IN                   : 28
LBRACKET             : 17 20 21 22
LE                   : 15
LPAREN               : 23
LT                   : 14
MINUS                : 3
MOD                  : 7
NE                   : 16
NOT                  : 24
NUMBER               : 26
OR                   : 10
PLUS                 : 2
POW                  : 8
RBRACKET             : 17 20 21 22
RPAREN               : 23
STRING               : 21 25
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 19 20 20 21 23 24 28 28
items                : 17 18
root                 : 0

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    root                           shift and go to state 1
    expr                           shift and go to state 2

state 1

    (0) S' -> root .



state 2

    (1) root -> expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    $end            reduce using rule 1 (root -> expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 3

    (17) expr -> LBRACKET . items RBRACKET
    (22) expr -> LBRACKET . RBRACKET
    (18) items -> . items COMMA expr
    (19) items -> . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    RBRACKET        shift and go to state 27
    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    items                          shift and go to state 26
    expr                           shift and go to state 28

state 4

    (21) expr -> STRING . LBRACKET expr RBRACKET
    (25) expr -> STRING .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 29
    PLUS            reduce using rule 25 (expr -> STRING .)
    MINUS           reduce using rule 25 (expr -> STRING .)
    TIMES           reduce using rule 25 (expr -> STRING .)
    DIVIDE          reduce using rule 25 (expr -> STRING .)
    FLOOR           reduce using rule 25 (expr -> STRING .)
    MOD             reduce using rule 25 (expr -> STRING .)
    POW             reduce using rule 25 (expr -> STRING .)
    AND             reduce using rule 25 (expr -> STRING .)
    OR              reduce using rule 25 (expr -> STRING .)
    GT              reduce using rule 25 (expr -> STRING .)
    GE              reduce using rule 25 (expr -> STRING .)
    EQ              reduce using rule 25 (expr -> STRING .)
    LT              reduce using rule 25 (expr -> STRING .)
    LE              reduce using rule 25 (expr -> STRING .)
    NE              reduce using rule 25 (expr -> STRING .)
    IN              reduce using rule 25 (expr -> STRING .)
    $end            reduce using rule 25 (expr -> STRING .)
    RBRACKET        reduce using rule 25 (expr -> STRING .)
    COMMA           reduce using rule 25 (expr -> STRING .)
    RPAREN          reduce using rule 25 (expr -> STRING .)

  ! LBRACKET        [ reduce using rule 25 (expr -> STRING .) ]


state 5

    (23) expr -> LPAREN . expr RPAREN
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 30

state 6

    (24) expr -> NOT . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 31

state 7

    (26) expr -> NUMBER .

    PLUS            reduce using rule 26 (expr -> NUMBER .)
    MINUS           reduce using rule 26 (expr -> NUMBER .)
    TIMES           reduce using rule 26 (expr -> NUMBER .)
    DIVIDE          reduce using rule 26 (expr -> NUMBER .)
    FLOOR           reduce using rule 26 (expr -> NUMBER .)
    MOD             reduce using rule 26 (expr -> NUMBER .)
    POW             reduce using rule 26 (expr -> NUMBER .)
    AND             reduce using rule 26 (expr -> NUMBER .)
    OR              reduce using rule 26 (expr -> NUMBER .)
    GT              reduce using rule 26 (expr -> NUMBER .)
    GE              reduce using rule 26 (expr -> NUMBER .)
    EQ              reduce using rule 26 (expr -> NUMBER .)
    LT              reduce using rule 26 (expr -> NUMBER .)
    LE              reduce using rule 26 (expr -> NUMBER .)
    NE              reduce using rule 26 (expr -> NUMBER .)
    LBRACKET        reduce using rule 26 (expr -> NUMBER .)
    IN              reduce using rule 26 (expr -> NUMBER .)
    $end            reduce using rule 26 (expr -> NUMBER .)
    RBRACKET        reduce using rule 26 (expr -> NUMBER .)
    COMMA           reduce using rule 26 (expr -> NUMBER .)
    RPAREN          reduce using rule 26 (expr -> NUMBER .)


state 8

    (27) expr -> BOOL .

    PLUS            reduce using rule 27 (expr -> BOOL .)
    MINUS           reduce using rule 27 (expr -> BOOL .)
    TIMES           reduce using rule 27 (expr -> BOOL .)
    DIVIDE          reduce using rule 27 (expr -> BOOL .)
    FLOOR           reduce using rule 27 (expr -> BOOL .)
    MOD             reduce using rule 27 (expr -> BOOL .)
    POW             reduce using rule 27 (expr -> BOOL .)
    AND             reduce using rule 27 (expr -> BOOL .)
    OR              reduce using rule 27 (expr -> BOOL .)
    GT              reduce using rule 27 (expr -> BOOL .)
    GE              reduce using rule 27 (expr -> BOOL .)
    EQ              reduce using rule 27 (expr -> BOOL .)
    LT              reduce using rule 27 (expr -> BOOL .)
    LE              reduce using rule 27 (expr -> BOOL .)
    NE              reduce using rule 27 (expr -> BOOL .)
    LBRACKET        reduce using rule 27 (expr -> BOOL .)
    IN              reduce using rule 27 (expr -> BOOL .)
    $end            reduce using rule 27 (expr -> BOOL .)
    RBRACKET        reduce using rule 27 (expr -> BOOL .)
    COMMA           reduce using rule 27 (expr -> BOOL .)
    RPAREN          reduce using rule 27 (expr -> BOOL .)


state 9

    (2) expr -> expr PLUS . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 32

state 10

    (3) expr -> expr MINUS . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 33

state 11

    (4) expr -> expr TIMES . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 34

state 12

    (5) expr -> expr DIVIDE . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 35

state 13

    (6) expr -> expr FLOOR . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 36

state 14

    (7) expr -> expr MOD . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 37

state 15

    (8) expr -> expr POW . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 38

state 16

    (9) expr -> expr AND . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 39

state 17

    (10) expr -> expr OR . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 40

state 18

    (11) expr -> expr GT . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 41

state 19

    (12) expr -> expr GE . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 42

state 20

    (13) expr -> expr EQ . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 43

state 21

    (14) expr -> expr LT . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 44

state 22

    (15) expr -> expr LE . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 45

state 23

    (16) expr -> expr NE . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 46

state 24

    (20) expr -> expr LBRACKET . expr RBRACKET
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 47

state 25

    (28) expr -> expr IN . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 48

state 26

    (17) expr -> LBRACKET items . RBRACKET
    (18) items -> items . COMMA expr

    RBRACKET        shift and go to state 49
    COMMA           shift and go to state 50


state 27

    (22) expr -> LBRACKET RBRACKET .

    PLUS            reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    FLOOR           reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    MOD             reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    POW             reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    AND             reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    OR              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    GT              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    GE              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    EQ              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    LT              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    LE              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    NE              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    IN              reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    $end            reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 22 (expr -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 22 (expr -> LBRACKET RBRACKET .)


state 28

    (19) items -> expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    RBRACKET        reduce using rule 19 (items -> expr .)
    COMMA           reduce using rule 19 (items -> expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 29

    (21) expr -> STRING LBRACKET . expr RBRACKET
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 51

state 30

    (23) expr -> LPAREN expr . RPAREN
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 31

    (24) expr -> NOT expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 24 (expr -> NOT expr .)
    OR              reduce using rule 24 (expr -> NOT expr .)
    $end            reduce using rule 24 (expr -> NOT expr .)
    RBRACKET        reduce using rule 24 (expr -> NOT expr .)
    COMMA           reduce using rule 24 (expr -> NOT expr .)
    RPAREN          reduce using rule 24 (expr -> NOT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 24 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> NOT expr .) ]
  ! FLOOR           [ reduce using rule 24 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! POW             [ reduce using rule 24 (expr -> NOT expr .) ]
  ! GT              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! GE              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! EQ              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! LT              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! LE              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! NE              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! LBRACKET        [ reduce using rule 24 (expr -> NOT expr .) ]
  ! IN              [ reduce using rule 24 (expr -> NOT expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]


state 32

    (2) expr -> expr PLUS expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 2 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 2 (expr -> expr PLUS expr .)
    AND             reduce using rule 2 (expr -> expr PLUS expr .)
    OR              reduce using rule 2 (expr -> expr PLUS expr .)
    GT              reduce using rule 2 (expr -> expr PLUS expr .)
    GE              reduce using rule 2 (expr -> expr PLUS expr .)
    EQ              reduce using rule 2 (expr -> expr PLUS expr .)
    LT              reduce using rule 2 (expr -> expr PLUS expr .)
    LE              reduce using rule 2 (expr -> expr PLUS expr .)
    NE              reduce using rule 2 (expr -> expr PLUS expr .)
    IN              reduce using rule 2 (expr -> expr PLUS expr .)
    $end            reduce using rule 2 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 2 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 2 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 2 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! TIMES           [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! FLOOR           [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! LBRACKET        [ reduce using rule 2 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 33

    (3) expr -> expr MINUS expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 3 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 3 (expr -> expr MINUS expr .)
    AND             reduce using rule 3 (expr -> expr MINUS expr .)
    OR              reduce using rule 3 (expr -> expr MINUS expr .)
    GT              reduce using rule 3 (expr -> expr MINUS expr .)
    GE              reduce using rule 3 (expr -> expr MINUS expr .)
    EQ              reduce using rule 3 (expr -> expr MINUS expr .)
    LT              reduce using rule 3 (expr -> expr MINUS expr .)
    LE              reduce using rule 3 (expr -> expr MINUS expr .)
    NE              reduce using rule 3 (expr -> expr MINUS expr .)
    IN              reduce using rule 3 (expr -> expr MINUS expr .)
    $end            reduce using rule 3 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 3 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 3 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 3 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! TIMES           [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! FLOOR           [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 3 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 34

    (4) expr -> expr TIMES expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 4 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 4 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 4 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 4 (expr -> expr TIMES expr .)
    FLOOR           reduce using rule 4 (expr -> expr TIMES expr .)
    MOD             reduce using rule 4 (expr -> expr TIMES expr .)
    AND             reduce using rule 4 (expr -> expr TIMES expr .)
    OR              reduce using rule 4 (expr -> expr TIMES expr .)
    GT              reduce using rule 4 (expr -> expr TIMES expr .)
    GE              reduce using rule 4 (expr -> expr TIMES expr .)
    EQ              reduce using rule 4 (expr -> expr TIMES expr .)
    LT              reduce using rule 4 (expr -> expr TIMES expr .)
    LE              reduce using rule 4 (expr -> expr TIMES expr .)
    NE              reduce using rule 4 (expr -> expr TIMES expr .)
    IN              reduce using rule 4 (expr -> expr TIMES expr .)
    $end            reduce using rule 4 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 4 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 4 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 4 (expr -> expr TIMES expr .)
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! POW             [ reduce using rule 4 (expr -> expr TIMES expr .) ]
  ! LBRACKET        [ reduce using rule 4 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! FLOOR           [ shift and go to state 13 ]
  ! MOD             [ shift and go to state 14 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 35

    (5) expr -> expr DIVIDE expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 5 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 5 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 5 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 5 (expr -> expr DIVIDE expr .)
    FLOOR           reduce using rule 5 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 5 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 5 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 5 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 5 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 5 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 5 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 5 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 5 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 5 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 5 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 5 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 5 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 5 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 5 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! POW             [ reduce using rule 5 (expr -> expr DIVIDE expr .) ]
  ! LBRACKET        [ reduce using rule 5 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! FLOOR           [ shift and go to state 13 ]
  ! MOD             [ shift and go to state 14 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 36

    (6) expr -> expr FLOOR expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 6 (expr -> expr FLOOR expr .)
    MINUS           reduce using rule 6 (expr -> expr FLOOR expr .)
    FLOOR           reduce using rule 6 (expr -> expr FLOOR expr .)
    AND             reduce using rule 6 (expr -> expr FLOOR expr .)
    OR              reduce using rule 6 (expr -> expr FLOOR expr .)
    GT              reduce using rule 6 (expr -> expr FLOOR expr .)
    GE              reduce using rule 6 (expr -> expr FLOOR expr .)
    EQ              reduce using rule 6 (expr -> expr FLOOR expr .)
    LT              reduce using rule 6 (expr -> expr FLOOR expr .)
    LE              reduce using rule 6 (expr -> expr FLOOR expr .)
    NE              reduce using rule 6 (expr -> expr FLOOR expr .)
    IN              reduce using rule 6 (expr -> expr FLOOR expr .)
    $end            reduce using rule 6 (expr -> expr FLOOR expr .)
    RBRACKET        reduce using rule 6 (expr -> expr FLOOR expr .)
    COMMA           reduce using rule 6 (expr -> expr FLOOR expr .)
    RPAREN          reduce using rule 6 (expr -> expr FLOOR expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! TIMES           [ reduce using rule 6 (expr -> expr FLOOR expr .) ]
  ! DIVIDE          [ reduce using rule 6 (expr -> expr FLOOR expr .) ]
  ! MOD             [ reduce using rule 6 (expr -> expr FLOOR expr .) ]
  ! POW             [ reduce using rule 6 (expr -> expr FLOOR expr .) ]
  ! LBRACKET        [ reduce using rule 6 (expr -> expr FLOOR expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! FLOOR           [ shift and go to state 13 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 37

    (7) expr -> expr MOD expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 7 (expr -> expr MOD expr .)
    MINUS           reduce using rule 7 (expr -> expr MOD expr .)
    FLOOR           reduce using rule 7 (expr -> expr MOD expr .)
    MOD             reduce using rule 7 (expr -> expr MOD expr .)
    AND             reduce using rule 7 (expr -> expr MOD expr .)
    OR              reduce using rule 7 (expr -> expr MOD expr .)
    GT              reduce using rule 7 (expr -> expr MOD expr .)
    GE              reduce using rule 7 (expr -> expr MOD expr .)
    EQ              reduce using rule 7 (expr -> expr MOD expr .)
    LT              reduce using rule 7 (expr -> expr MOD expr .)
    LE              reduce using rule 7 (expr -> expr MOD expr .)
    NE              reduce using rule 7 (expr -> expr MOD expr .)
    IN              reduce using rule 7 (expr -> expr MOD expr .)
    $end            reduce using rule 7 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 7 (expr -> expr MOD expr .)
    COMMA           reduce using rule 7 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 7 (expr -> expr MOD expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! TIMES           [ reduce using rule 7 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 7 (expr -> expr MOD expr .) ]
  ! POW             [ reduce using rule 7 (expr -> expr MOD expr .) ]
  ! LBRACKET        [ reduce using rule 7 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! FLOOR           [ shift and go to state 13 ]
  ! MOD             [ shift and go to state 14 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 38

    (8) expr -> expr POW expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    PLUS            reduce using rule 8 (expr -> expr POW expr .)
    MINUS           reduce using rule 8 (expr -> expr POW expr .)
    TIMES           reduce using rule 8 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 8 (expr -> expr POW expr .)
    FLOOR           reduce using rule 8 (expr -> expr POW expr .)
    MOD             reduce using rule 8 (expr -> expr POW expr .)
    AND             reduce using rule 8 (expr -> expr POW expr .)
    OR              reduce using rule 8 (expr -> expr POW expr .)
    GT              reduce using rule 8 (expr -> expr POW expr .)
    GE              reduce using rule 8 (expr -> expr POW expr .)
    EQ              reduce using rule 8 (expr -> expr POW expr .)
    LT              reduce using rule 8 (expr -> expr POW expr .)
    LE              reduce using rule 8 (expr -> expr POW expr .)
    NE              reduce using rule 8 (expr -> expr POW expr .)
    IN              reduce using rule 8 (expr -> expr POW expr .)
    $end            reduce using rule 8 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 8 (expr -> expr POW expr .)
    COMMA           reduce using rule 8 (expr -> expr POW expr .)
    RPAREN          reduce using rule 8 (expr -> expr POW expr .)
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! POW             [ reduce using rule 8 (expr -> expr POW expr .) ]
  ! LBRACKET        [ reduce using rule 8 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! FLOOR           [ shift and go to state 13 ]
  ! MOD             [ shift and go to state 14 ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 39

    (9) expr -> expr AND expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 9 (expr -> expr AND expr .)
    OR              reduce using rule 9 (expr -> expr AND expr .)
    $end            reduce using rule 9 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 9 (expr -> expr AND expr .)
    COMMA           reduce using rule 9 (expr -> expr AND expr .)
    RPAREN          reduce using rule 9 (expr -> expr AND expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! FLOOR           [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! POW             [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! LBRACKET        [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! IN              [ reduce using rule 9 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]


state 40

    (10) expr -> expr OR expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    OR              reduce using rule 10 (expr -> expr OR expr .)
    $end            reduce using rule 10 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 10 (expr -> expr OR expr .)
    COMMA           reduce using rule 10 (expr -> expr OR expr .)
    RPAREN          reduce using rule 10 (expr -> expr OR expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! FLOOR           [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! POW             [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! LBRACKET        [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! IN              [ reduce using rule 10 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 17 ]


state 41

    (11) expr -> expr GT expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 11 (expr -> expr GT expr .)
    OR              reduce using rule 11 (expr -> expr GT expr .)
    GT              reduce using rule 11 (expr -> expr GT expr .)
    GE              reduce using rule 11 (expr -> expr GT expr .)
    EQ              reduce using rule 11 (expr -> expr GT expr .)
    LT              reduce using rule 11 (expr -> expr GT expr .)
    LE              reduce using rule 11 (expr -> expr GT expr .)
    NE              reduce using rule 11 (expr -> expr GT expr .)
    $end            reduce using rule 11 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 11 (expr -> expr GT expr .)
    COMMA           reduce using rule 11 (expr -> expr GT expr .)
    RPAREN          reduce using rule 11 (expr -> expr GT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! FLOOR           [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! LBRACKET        [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! IN              [ reduce using rule 11 (expr -> expr GT expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 42

    (12) expr -> expr GE expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 12 (expr -> expr GE expr .)
    OR              reduce using rule 12 (expr -> expr GE expr .)
    GT              reduce using rule 12 (expr -> expr GE expr .)
    GE              reduce using rule 12 (expr -> expr GE expr .)
    EQ              reduce using rule 12 (expr -> expr GE expr .)
    LT              reduce using rule 12 (expr -> expr GE expr .)
    LE              reduce using rule 12 (expr -> expr GE expr .)
    NE              reduce using rule 12 (expr -> expr GE expr .)
    $end            reduce using rule 12 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 12 (expr -> expr GE expr .)
    COMMA           reduce using rule 12 (expr -> expr GE expr .)
    RPAREN          reduce using rule 12 (expr -> expr GE expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! FLOOR           [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! LBRACKET        [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! IN              [ reduce using rule 12 (expr -> expr GE expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 43

    (13) expr -> expr EQ expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 13 (expr -> expr EQ expr .)
    OR              reduce using rule 13 (expr -> expr EQ expr .)
    GT              reduce using rule 13 (expr -> expr EQ expr .)
    GE              reduce using rule 13 (expr -> expr EQ expr .)
    EQ              reduce using rule 13 (expr -> expr EQ expr .)
    LT              reduce using rule 13 (expr -> expr EQ expr .)
    LE              reduce using rule 13 (expr -> expr EQ expr .)
    NE              reduce using rule 13 (expr -> expr EQ expr .)
    $end            reduce using rule 13 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 13 (expr -> expr EQ expr .)
    COMMA           reduce using rule 13 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 13 (expr -> expr EQ expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! FLOOR           [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! LBRACKET        [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! IN              [ reduce using rule 13 (expr -> expr EQ expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 44

    (14) expr -> expr LT expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 14 (expr -> expr LT expr .)
    OR              reduce using rule 14 (expr -> expr LT expr .)
    GT              reduce using rule 14 (expr -> expr LT expr .)
    GE              reduce using rule 14 (expr -> expr LT expr .)
    EQ              reduce using rule 14 (expr -> expr LT expr .)
    LT              reduce using rule 14 (expr -> expr LT expr .)
    LE              reduce using rule 14 (expr -> expr LT expr .)
    NE              reduce using rule 14 (expr -> expr LT expr .)
    $end            reduce using rule 14 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 14 (expr -> expr LT expr .)
    COMMA           reduce using rule 14 (expr -> expr LT expr .)
    RPAREN          reduce using rule 14 (expr -> expr LT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! FLOOR           [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! LBRACKET        [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! IN              [ reduce using rule 14 (expr -> expr LT expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 45

    (15) expr -> expr LE expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 15 (expr -> expr LE expr .)
    OR              reduce using rule 15 (expr -> expr LE expr .)
    GT              reduce using rule 15 (expr -> expr LE expr .)
    GE              reduce using rule 15 (expr -> expr LE expr .)
    EQ              reduce using rule 15 (expr -> expr LE expr .)
    LT              reduce using rule 15 (expr -> expr LE expr .)
    LE              reduce using rule 15 (expr -> expr LE expr .)
    NE              reduce using rule 15 (expr -> expr LE expr .)
    $end            reduce using rule 15 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 15 (expr -> expr LE expr .)
    COMMA           reduce using rule 15 (expr -> expr LE expr .)
    RPAREN          reduce using rule 15 (expr -> expr LE expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! FLOOR           [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! LBRACKET        [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! IN              [ reduce using rule 15 (expr -> expr LE expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 46

    (16) expr -> expr NE expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 16 (expr -> expr NE expr .)
    OR              reduce using rule 16 (expr -> expr NE expr .)
    GT              reduce using rule 16 (expr -> expr NE expr .)
    GE              reduce using rule 16 (expr -> expr NE expr .)
    EQ              reduce using rule 16 (expr -> expr NE expr .)
    LT              reduce using rule 16 (expr -> expr NE expr .)
    LE              reduce using rule 16 (expr -> expr NE expr .)
    NE              reduce using rule 16 (expr -> expr NE expr .)
    $end            reduce using rule 16 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 16 (expr -> expr NE expr .)
    COMMA           reduce using rule 16 (expr -> expr NE expr .)
    RPAREN          reduce using rule 16 (expr -> expr NE expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25

  ! PLUS            [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! FLOOR           [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! LBRACKET        [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! IN              [ reduce using rule 16 (expr -> expr NE expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]


state 47

    (20) expr -> expr LBRACKET expr . RBRACKET
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    RBRACKET        shift and go to state 53
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 48

    (28) expr -> expr IN expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    AND             reduce using rule 28 (expr -> expr IN expr .)
    OR              reduce using rule 28 (expr -> expr IN expr .)
    GT              reduce using rule 28 (expr -> expr IN expr .)
    GE              reduce using rule 28 (expr -> expr IN expr .)
    EQ              reduce using rule 28 (expr -> expr IN expr .)
    LT              reduce using rule 28 (expr -> expr IN expr .)
    LE              reduce using rule 28 (expr -> expr IN expr .)
    NE              reduce using rule 28 (expr -> expr IN expr .)
    IN              reduce using rule 28 (expr -> expr IN expr .)
    $end            reduce using rule 28 (expr -> expr IN expr .)
    RBRACKET        reduce using rule 28 (expr -> expr IN expr .)
    COMMA           reduce using rule 28 (expr -> expr IN expr .)
    RPAREN          reduce using rule 28 (expr -> expr IN expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    LBRACKET        shift and go to state 24

  ! PLUS            [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! FLOOR           [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! POW             [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! LBRACKET        [ reduce using rule 28 (expr -> expr IN expr .) ]
  ! AND             [ shift and go to state 16 ]
  ! OR              [ shift and go to state 17 ]
  ! GT              [ shift and go to state 18 ]
  ! GE              [ shift and go to state 19 ]
  ! EQ              [ shift and go to state 20 ]
  ! LT              [ shift and go to state 21 ]
  ! LE              [ shift and go to state 22 ]
  ! NE              [ shift and go to state 23 ]
  ! IN              [ shift and go to state 25 ]


state 49

    (17) expr -> LBRACKET items RBRACKET .

    PLUS            reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    MINUS           reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    TIMES           reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    DIVIDE          reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    FLOOR           reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    MOD             reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    POW             reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    AND             reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    OR              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    GT              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    GE              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    EQ              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    LT              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    LE              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    NE              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    LBRACKET        reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    IN              reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    $end            reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    RBRACKET        reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    COMMA           reduce using rule 17 (expr -> LBRACKET items RBRACKET .)
    RPAREN          reduce using rule 17 (expr -> LBRACKET items RBRACKET .)


state 50

    (18) items -> items COMMA . expr
    (2) expr -> . expr PLUS expr
    (3) expr -> . expr MINUS expr
    (4) expr -> . expr TIMES expr
    (5) expr -> . expr DIVIDE expr
    (6) expr -> . expr FLOOR expr
    (7) expr -> . expr MOD expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr OR expr
    (11) expr -> . expr GT expr
    (12) expr -> . expr GE expr
    (13) expr -> . expr EQ expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr LE expr
    (16) expr -> . expr NE expr
    (17) expr -> . LBRACKET items RBRACKET
    (20) expr -> . expr LBRACKET expr RBRACKET
    (21) expr -> . STRING LBRACKET expr RBRACKET
    (22) expr -> . LBRACKET RBRACKET
    (23) expr -> . LPAREN expr RPAREN
    (24) expr -> . NOT expr
    (25) expr -> . STRING
    (26) expr -> . NUMBER
    (27) expr -> . BOOL
    (28) expr -> . expr IN expr

    LBRACKET        shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    NOT             shift and go to state 6
    NUMBER          shift and go to state 7
    BOOL            shift and go to state 8

    expr                           shift and go to state 54

state 51

    (21) expr -> STRING LBRACKET expr . RBRACKET
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    RBRACKET        shift and go to state 55
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 52

    (23) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    FLOOR           reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 23 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 23 (expr -> LPAREN expr RPAREN .)


state 53

    (20) expr -> expr LBRACKET expr RBRACKET .

    PLUS            reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    POW             reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    EQ              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    IN              reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    $end            reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 20 (expr -> expr LBRACKET expr RBRACKET .)


state 54

    (18) items -> items COMMA expr .
    (2) expr -> expr . PLUS expr
    (3) expr -> expr . MINUS expr
    (4) expr -> expr . TIMES expr
    (5) expr -> expr . DIVIDE expr
    (6) expr -> expr . FLOOR expr
    (7) expr -> expr . MOD expr
    (8) expr -> expr . POW expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . OR expr
    (11) expr -> expr . GT expr
    (12) expr -> expr . GE expr
    (13) expr -> expr . EQ expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . LE expr
    (16) expr -> expr . NE expr
    (20) expr -> expr . LBRACKET expr RBRACKET
    (28) expr -> expr . IN expr

    RBRACKET        reduce using rule 18 (items -> items COMMA expr .)
    COMMA           reduce using rule 18 (items -> items COMMA expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    FLOOR           shift and go to state 13
    MOD             shift and go to state 14
    POW             shift and go to state 15
    AND             shift and go to state 16
    OR              shift and go to state 17
    GT              shift and go to state 18
    GE              shift and go to state 19
    EQ              shift and go to state 20
    LT              shift and go to state 21
    LE              shift and go to state 22
    NE              shift and go to state 23
    LBRACKET        shift and go to state 24
    IN              shift and go to state 25


state 55

    (21) expr -> STRING LBRACKET expr RBRACKET .

    PLUS            reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    FLOOR           reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    MOD             reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    POW             reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    AND             reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    OR              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    GT              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    GE              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    EQ              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    LT              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    LE              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    NE              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    IN              reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    $end            reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 21 (expr -> STRING LBRACKET expr RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 4 resolved as shift
